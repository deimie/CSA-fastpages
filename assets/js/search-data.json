{
  
    
        "post0": {
            "title": "Fibonacci With Java",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class Fibo { String name; int size; int hashID; ArrayList&lt;Long&gt; list; HashMap&lt;Integer, Object&gt; hash; public Fibo() { this(20); } public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); this.init(); } protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } public long getNth() { return list.get(this.size - 1); } public Object getNthSeq(int i) { return hash.get(i); } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://deimie.github.io/fastpages/2022/09/22/fibonacci-java.html",
            "relUrl": "/2022/09/22/fibonacci-java.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Javascript Notes",
            "content": "Javascript Data Types . Here is a function that will print out the data type of an input. . function dataType(data) { console.log(data + &quot;: &quot; + typeof data) } dataType(&quot;Hello&quot;); dataType(3); dataType(true); dataType(null); dataType(); . Hello: string 3: number true: boolean null: object undefined: undefined . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;John Mortenson&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript dataType(teacher); // before role dataType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role dataType(teacher); dataType(teacher.toJSON()); . [object Object]: object {&#34;name&#34;:&#34;John Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;}: string [object Object]: object {&#34;name&#34;:&#34;John Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;}: string . // define a student Array of Person(s) var students = [ new Person(&quot;Evan Sanchez&quot;, &quot;deimie&quot;, 2023), new Person(&quot;Calissa Tyrrell&quot;, &quot;CalissaT&quot;, 2023), new Person(&quot;Samuel Wang&quot;, &quot;Samuelwaang&quot;, 2023), new Person(&quot;Kian Pasokhi&quot;, &quot;kiannp44&quot;, 2023), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom dataType(compsci.classroom); // constructed classroom object dataType(compsci.classroom[0].name); // abstract 1st objects name dataType(compsci.json[0]); // show json conversion of 1st object to string dataType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . [object Object],[object Object],[object Object],[object Object],[object Object]: object John Mortenson: string {&#34;name&#34;:&#34;John Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;}: string [object Object]: object . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( `&lt;style&gt; .dataTable th{ color: gray; } &lt;/style&gt;` ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&quot; + &quot;Name&quot; + &quot;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&quot; + &quot;Role&quot; + &quot;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( style + &quot;&lt;div&gt;&quot; + &quot;&lt;table class=&#39;dataTable&#39;&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()) . NameGitHub IDClass OfRole . John Mortenson | jm1021 | 1977 | Teacher | Evan Sanchez | deimie | 2023 | Student | Calissa Tyrrell | CalissaT | 2023 | Student | Samuel Wang | Samuelwaang | 2023 | Student | Kian Pasokhi | kiannp44 | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://deimie.github.io/fastpages/2022/09/21/js-notes.html",
            "relUrl": "/2022/09/21/js-notes.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Hash Maps",
            "content": "public class tester { public static void main(String[] args) { System.out.println(&quot;Tester&quot;); } } . import java.util.HashMap; // import the built-in hashMap for java public class HashMaps { public static void main(String[] args) { // just some random variables to manage int a = 10; int b = 33; int c = 59; // instatiate &quot;firstHash&quot; object from the class &quot;HashMap&quot; // putting &lt;dataType1, dataType2, etc...&gt; explicitly tells the program what each value will be HashMap&lt;String, Integer&gt; firstHash = new HashMap&lt;String, Integer&gt;(); // syntax: hashMapObject.put(key, value); // the &quot;put(k, v)&quot; method allows us to insert a specific key and its value in a map // the key is just a name. value is the value of said name firstHash.put(&quot;a&quot;, 10); firstHash.put(&quot;b&quot;, 33); firstHash.put(&quot;c&quot;, 59); System.out.println(firstHash.get(&quot;c&quot;)); } } . public class advancedHashMap { public static void main(String[] args) { Hashmap&lt;String, String&gt; advancedHashMap = new HashMap&lt;String, String&gt;(); advancedHashMap.put(&quot;Evan&quot;, &quot;Password123&quot;); advancedHashMap.put(&quot;Calissa&quot;, &quot;P@55w0rd123!&quot;); advancedHashMap.put(&quot;Kian&quot;, &quot;myPassword&quot;); advancedHashMap.put(&quot;Samuel&quot;, &quot;m13_p@55w0rd?!?&quot;); System.out.println(advancedHashMap); } } .",
            "url": "https://deimie.github.io/fastpages/2022/09/21/hashMaps.html",
            "relUrl": "/2022/09/21/hashMaps.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Methods and Control Structures",
            "content": "2019 AP® COMPUTER SCIENCE A FREE-RESPONSE QUESTIONS . This question involves the implementation of a fitness tracking system that is represented by the StepTracker class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. | The StepTracker class provides a constructor and the following methods. . addDailySteps, which accumulates information about steps, in readings taken once per day . | activeDays, which returns the number of active days . | averageSteps, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked . | . public class StepTracker { // new class &#39;StepTracker&#39; StepTracker st = new StepTracker(10000); //variables which will be used in methods private int days; private int activeDays; private int totalSteps; private int minActive; public int StepTracker(int m) { minActive = m; } public int activeDays() { // returns # of active days return activeDays; } public void addDailySteps(int steps) { // adds 1 to day counter and allows input of step count. will also incremenet active days if step count is met days++; totalSteps += steps; if (steps &gt;= minActive) { activeDays++; } } public double averageSteps() { // takes the average of steps across days if (days &gt; 0) { return (double) totalSteps / days; } else { return 0.0; } } } .",
            "url": "https://deimie.github.io/fastpages/2022/09/19/unit1-lesson.html",
            "relUrl": "/2022/09/19/unit1-lesson.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "ASCII 2D Array",
            "content": "class MonkeyLoop { String [][] monkeys; public MonkeyLoop() { monkeys = new String[][] { //Monkey 0 { &quot; c(..)o ( &quot;, &quot; __(-) __)&quot;, &quot; / ( &quot;, &quot; /(_)___) &quot;, &quot; w /| &quot;, &quot; | &quot;, &quot; m m &quot; }, //Monkey 1 { &quot; c(..)o ( &quot;, &quot; __(-) __)&quot;, &quot; / ( &quot;, &quot; /(_)___) &quot;, &quot; w /| &quot;, &quot; | &quot;, &quot; m m &quot; }, //Monkey 2 { &quot; c(..)o ( &quot;, &quot; __(-) __)&quot;, &quot; / ( &quot;, &quot; /(_)___) &quot;, &quot; w /| &quot;, &quot; | &quot;, &quot; m m &quot; }, //Monkey 3 { &quot; c(..)o ( &quot;, &quot; __(-) __)&quot;, &quot; / ( &quot;, &quot; /(_)___) &quot;, &quot; w /| &quot;, &quot; | &quot;, &quot; m m &quot; }, //Monkey 4 { &quot; c(..)o ( &quot;, &quot; __(-) __)&quot;, &quot; / ( &quot;, &quot; /(_)___) &quot;, &quot; w /| &quot;, &quot; | &quot;, &quot; m m &quot; }, }; } public void printText() { System.out.println(); System.out.println(&quot;The Monkeys&quot;); int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) { System.out.println(&quot;-========== &quot; + i + &quot; Monkeys ==========-&quot;); for (int row = 0; row &lt; monkeys[0].length; row++) { for (int col = 0; col &lt; monkeyCount; col++) { System.out.print(monkeys[col][row] + &quot; &quot;); } System.out.println(); } monkeyCount --; } System.out.println(&quot;All the monkeys are gone&quot;); System.out.println(&quot;-================================-&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new MonkeyLoop().printText(); } } MonkeyLoop.main(null); . The Monkeys -========== 5 Monkeys ==========- c(..)o ( c(..)o ( c(..)o ( c(..)o ( c(..)o ( __(-) __) __(-) __) __(-) __) __(-) __) __(-) __) / ( / ( / ( / ( / ( /(_)___) /(_)___) /(_)___) /(_)___) /(_)___) w /| w /| w /| w /| w /| | | | | | m m m m m m m m m m -========== 4 Monkeys ==========- c(..)o ( c(..)o ( c(..)o ( c(..)o ( __(-) __) __(-) __) __(-) __) __(-) __) / ( / ( / ( / ( /(_)___) /(_)___) /(_)___) /(_)___) w /| w /| w /| w /| | | | | m m m m m m m m -========== 3 Monkeys ==========- c(..)o ( c(..)o ( c(..)o ( __(-) __) __(-) __) __(-) __) / ( / ( / ( /(_)___) /(_)___) /(_)___) w /| w /| w /| | | | m m m m m m -========== 2 Monkeys ==========- c(..)o ( c(..)o ( __(-) __) __(-) __) / ( / ( /(_)___) /(_)___) w /| w /| | | m m m m -========== 1 Monkeys ==========- c(..)o ( __(-) __) / ( /(_)___) w /| | m m All the monkeys are gone -================================- THE END .",
            "url": "https://deimie.github.io/fastpages/2022/09/16/ascii-2d-array.html",
            "relUrl": "/2022/09/16/ascii-2d-array.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Conditionals",
            "content": "// De Morgan&#39;s Law Demonstration if (!(true &amp;&amp; false)) { // if NOT (true AND false) System.out.println(&quot;1st True&quot;); } if (false || true) { //simplfied version of above condition. if false OR true System.out.println(&quot;2nd True&quot;); } /* According to De Morgan&#39;s law, a NOT condition will turn an AND into an OR and an OR into an AND. The two conditon above are the same condition. */ if (!(false &amp;&amp; !false)) { // if NOT (false AND NOT(false)) System.out.println(&quot;3rd True&quot;); } if (true || true) { // simplified version of above condition. if true OR true System.out.println(&quot;4th True&quot;); } if (!(true || true)) { // this last one does not display because the OR switches to an AND and the trues switch to falses System.out.println(&quot;5th True&quot;); } . 1st True 2nd True 3rd True 4th True . // If, Else If, Else Demonstration if (1 == 1) { // if 1 is 1 (it always is) display true System.out.println(&quot;This is true&quot;); } if (1 == 2) { // 1 is not 2 so this is ignored System.out.println(&quot;This won&#39;t display&quot;); } else if (2 == 2){ System.out.println(&quot;This one&#39;s also true&quot;); } if (1 == 2) { // Non-true statement System.out.println(&quot;This isn&#39;t true&quot;); } else if (1 == 3) { // Non-true statement System.out.println(&quot;This isn&#39;t either&quot;); } else { // Because no other statements were true, this is the last response System.out.println(&quot;Nothing else was true, so this is the reponse if nothing else works.&quot;); } . This is true This one&#39;s also true Nothing else was true, so this is the reponse if nothing else works. .",
            "url": "https://deimie.github.io/fastpages/2022/09/07/conditional-lesson.html",
            "relUrl": "/2022/09/07/conditional-lesson.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Innovation - Week 2",
            "content": "Github Link . Evan Sanchez’s Review Ticket . Reviewed by: Calissa Tyrell . Score 2.7+/3 . . Link to java menu . | Link to code.org takeaways . | Code.org completion proof . | . .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/09/06/Innovation-Week-2.html",
            "relUrl": "/markdown/2022/09/06/Innovation-Week-2.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;-&quot;); System.out.println(&quot;Select A Function&quot;); System.out.println(&quot;-&quot;); System.out.println(&quot;1 - Basic Addition&quot;); System.out.println(&quot;2 - WIP&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;See you later!&quot;); quit = true; break; case 1: Scanner sc = new Scanner(System.in); System.out.println(&quot;Basic Addition &quot;); System.out.println(&quot;Please select first number: &quot;); int choice1 = sc.nextInt(); System.out.println(&quot;Please select second number: &quot;); int choice2 = sc.nextInt(); System.out.print(&quot;Your sum is: &quot; + (choice1 + choice2)); sc.close(); break; case 2: System.out.println(&quot;Option 2 &quot;); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Select A Function - 1 - Basic Addition 2 - WIP 0 - Quit - 2: Option 2 0: See you later! .",
            "url": "https://deimie.github.io/fastpages/2022/08/30/java-menu.html",
            "relUrl": "/2022/08/30/java-menu.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Innovation - Week 1",
            "content": "Github Link . Create a Jupyter Notebook and that you could use it to show that you have all the key tools installed using Bash. . | Create a Jupyter Notebook(s) using IJava kernel and that you could use it to capture key learning on Primitives. . | Seeing that you understand how to use Code.org and that you used it to complement your learning on primitives. Up to Lesson 5 in the OOP assignment. Code.org documentation . | .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/08/29/Innovation-Week-1.html",
            "relUrl": "/markdown/2022/08/29/Innovation-Week-1.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Primitives",
            "content": "public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; double aDouble = 89.9; boolean aBoolean = true; // not primitives but essential String aString = &quot;Hello, World!&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 100 aDouble: 89.9 aBoolean: true aString: Hello, World! aStringFormal: Greetings, World! . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: Not an integer (form like 159), java.util.InputMismatchException Enter a double: . public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . public class GradeCalculator { // introduction to Double wrapper class (object) ArrayList&lt;Double&gt; grades; // similar to Python list // constructor, initializes ArrayList and call enterGrades method public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } // double requires test for zero versus threshold, DO NOT compare to Zero private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // average calculation public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assign operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructor, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standardize to two decimal points } } // IJava activation GradeCalculator.main(null); .",
            "url": "https://deimie.github.io/fastpages/2022/08/26/primitives.html",
            "relUrl": "/2022/08/26/primitives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Bash",
            "content": "cd vscode ls . bash: cd: vscode: No such file or directory 2022-08-22-javaNotebook.ipynb README.md 2022-08-22-pythonNotebook.ipynb ghtop_images 2022-08-25-bash.ipynb my_icons 2022-08-26-primitives.ipynb . python --version python2 --version java --version javac --version . Python 3.9.12 Python 2.7.18 openjdk 17.0.4 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode, sharing) javac 17.0.4 . jupyter kernelspec list . Available kernels: bash /Users/evan/Library/Jupyter/kernels/bash java /Users/evan/Library/Jupyter/kernels/java javascript /Users/evan/Library/Jupyter/kernels/javascript python3 /Users/evan/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://deimie.github.io/fastpages/2022/08/25/bash.html",
            "relUrl": "/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Python Notebook",
            "content": "n = int(input(&#39;Type the nth term in the fibonacci sequence: &#39;)) def fibonacci(n): a=0 b=1 fibList = [0] # there are no negative nth terms allowed if n &lt;=0: print(&#39;Input must be greater than 0.&#39;) fibonacci() # restart the program # instead of using logic for the whole sequence, it&#39;s easier to make the 1st term always return 0. elif n == 1: print(fibList) return else: fibList.append(1) # for loop will go through each number of the sequence and append them into the list. for i in range(2,n): c = a + b a = b b = c fibList.append(c) print(fibList) # print final result fibonacci(n) . [0, 1, 1, 2, 3] .",
            "url": "https://deimie.github.io/fastpages/2022/08/22/pythonNotebook.html",
            "relUrl": "/2022/08/22/pythonNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Notebook",
            "content": "// Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! .",
            "url": "https://deimie.github.io/fastpages/2022/08/22/javaNotebook.html",
            "relUrl": "/2022/08/22/javaNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Tool Setup - Week 0",
            "content": "Github Link . Fastpages with post . Build personal Fastpages / GitHub pages “_post” share the following. . | Share link to personal Fastpages / GitHub pages running on github.io. . | My suggestion is to change index.html to show it is really yours. . | Share link to a new page (_posts) in your Fastpages project show use of Markdown and/or HTML fragments. You will need to learn special date requirements of a file as well as a little Markdown or HTML. . | Share link to Python Jupyter notebook (_notebooks) showing usage of Python: print (“Hello”) . | Share link to Java Jupyter notebook (_notebooks) showing usage of Java: System.out.println(“Hello”) . | Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) . | Share link showing your GitHub insights. This is your personal activity of commit history. . | . Java project running on localhost:8080 .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/08/22/Tool-Setup-Week-0.html",
            "relUrl": "/markdown/2022/08/22/Tool-Setup-Week-0.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Evan Sanchez . I am a CSA student at Del Norte High School! .",
          "url": "https://deimie.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Blog",
          "content": "Week 3 . This week we had to work on a lesson for java conditionals, and I also decided to add documentation about De Morgan’s law. The basic run down is that an if statement will return an output if a set condition is met. An else if statement will execute if it’s own condition is met so long as the intial if statement’s condition was not met. An else statement has the final say at the bottom of the block meaning that if no other conditions were met, it will output. else and else if do not need to be included however, and the if statement can be used alone. . De Morgan’s law is the principle that applying NOT logic to AND logic will flip it to OR logic. The same is true in reverse. . This week we also had our human day where we discussed how happiness is mostly a choice. A good amount of the happiness we derive comes from the choice to be happy. There are of course scenarios that help with promoting happiness such as wealth or success. At the end of the day, it’s all down to the person. Personally, having enough money to get by boosts my happiness, but money is certainly not a huge priority in this case. Often times people with too much money end up losing personal connections and relationships with people they once knew well. All in all, happiness is a very fickle thing that will always remain important to try to maintain in whatever way works best for you. .",
          "url": "https://deimie.github.io/fastpages/blog/",
          "relUrl": "/blog/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "",
          "content": "Welcome to my page! . | | | . . Posts .",
          "url": "https://deimie.github.io/fastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Notes",
          "content": "Capture Information Plan . I plan to store all new information that I learn in this notes page for the rest of the trimester. This will mostly be the info I learn about java from code.org or personal research . . Syntax for Front Matter . . . Code.org Documentation . Lesson 1 . Lesson 1 is simply an introduction to the course. It talks about how CSA students are taught to think similarly to software engineers, and how we will continue to grow form this. . Lesson 2 . In lesson 2, we learn about the basic structure of a java header, as well as some basic syntax. Below is a basic java header. . public class className { public static void main(String[] args) { } } . The main method is the most common method used as an entry point to any java program. | The public method is simply a method that makes the scope of the code global. It’s kind of in the name. | static means that there will only be one type of this method and that it will be shared. Basically, we can call the main method multiple times without creating a new object. | void means there will be nothing returned from the main method. | String[] args - The main method’s argument is an array of string type. THis allows the method to accept command line arguments, which are stored as strings in this variable. args can be changed. | . Lesson 3 . To instatiate a new object you use the syntax: className objectName = new className(); . Lesson 4 . Lesson 4 was just lots of tedious programming challenges using the things we already learned from the first 3 lessons. There were 4 different challenges where we controlled a painter. These challenges made it almost muscle memory to call objects in java. . Lesson 5 . Lesson 5 was similar to lesson 4, by having many challnges to complete, except now the if statement was introduced. . Lesson 6 . We learned about subclasses and superclasses. A subclass is a class that has its own attributes, but will inherit all of the attributes from a superclass. The way to construct a subclass is below: . public class SubClassName extends SuperClassName { public SubClassName() { super(); } } . Lesson 7 . In lesson 7 we learn about creating new methods. The way we can do this is below: . public void methodName(){ //create a method // put code that you want the method to run } variableName.methodName(); //to call the method . Important sidenote: In javalabs on code.org, you have to extend your subclass to the superclass “Painter” in order to use most of the prebuilt features. . Lesson 8 . In lesson 8, we learn about commenting code using // or /* */. We also learn about commiting files, which are then stored in the backpack. These files can be imported once again from the backpack. We learn about opening code reviews where peers can see and comment on our code (But these have to be enabled by the teacher, which they are presently not). . Lesson 9 . In this lesson the while loop was introduced. Everything else was very standard, and simply challenged us to use the while loop. . Lesson 10 . This lesson introduced logic gates. ! is the NOT operator. &amp;&amp; is the AND operator. . Lesson 11 . This lesson was just a few basic debugging chhallenges. We would look as dysfunctional code and try to figure out what was wrong with out. Nothing new in this lesson, just review. . Lesson 12 . This lesson challenged us to make new slighty more complicated methods, but once again, nothing really new. . Lesson 13 . I could be entirely misunderstanding, but I could not for the life of me figure out this lesson. It seemed bugged, as there was no paint for the painter to use. I did some research and I’m quite lost, but the concept was just to create and save a method in a new file so it could be used across projects. . Lesson 14 . This lesson branched off 13 a bit with the concept. To be honest the last few lessons are very repetitive and no new info was really taught. . Lesson 15 . The final lesson was simply a FRQ asking about your best software engineer qualitly. Not a real lesson. . . Class Notes .",
          "url": "https://deimie.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deimie.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}