{
  
    
        "post0": {
            "title": "Innovation - Week 1",
            "content": "Github Link . Create a Jupyter Notebook and that you could use it to show that you have all the key tools installed using Bash. . | Create a Jupyter Notebook(s) using IJava kernel and that you could use it to capture key learning on Primitives. . | Seeing that you understand how to use Code.org and that you used it to complement your learning on primitives. Up to Lesson 5 in the OOP assignment. Code.org documentation . | .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/08/29/Innovation-Week-1.html",
            "relUrl": "/markdown/2022/08/29/Innovation-Week-1.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Code Documentation",
            "content": "Lesson 1 . Lesson 1 is simply an introduction to the course. It talks about how CSA students are taught to think similarly to software engineers, and how we will continue to grow form this. . Lesson 2 . In lesson 2, we learn about the basic structure of a java header, as well as some basic syntax. Below is a basic java header. . public class className { public static void main(String[] args) { } } . The main method is the most common method used as an entry point to any java program. | The public method is simply a method that makes the scope of the code global. It’s kind of in the name. | static means that there will only be one type of this method and that it will be shared. Basically, we can call the main method multiple times without creating a new object. | void means there will be nothing returned from the main method. | String[] args - The main method’s argument is an array of string type. THis allows the method to accept command line arguments, which are stored as strings in this variable. args can be changed. | . Lesson 3 . To instatiate a new object you use the syntax: className objectName = new className(); . Lesson 4 . Lesson 4 was just lots of tedious programming challenges using the things we already learned from the first 3 lessons. There were 4 different challenges where we controlled a painter. These challenges made it almost muscle memory to call objects in java. . Lesson 5 . Lesson 5 was similar to lesson 4, by having many challnges to complete, except now the if statement was introduced. .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/08/27/code-documentation.html",
            "relUrl": "/markdown/2022/08/27/code-documentation.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitives",
            "content": "",
            "url": "https://deimie.github.io/fastpages/2022/08/26/primitives.html",
            "relUrl": "/2022/08/26/primitives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash",
            "content": "cd vscode ls .",
            "url": "https://deimie.github.io/fastpages/2022/08/25/bash.html",
            "relUrl": "/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python Notebook",
            "content": "n = int(input(&#39;Type the nth term in the fibonacci sequence: &#39;)) def fibonacci(n): a=0 b=1 fibList = [0] # there are no negative nth terms allowed if n &lt;=0: print(&#39;Input must be greater than 0.&#39;) fibonacci() # restart the program # instead of using logic for the whole sequence, it&#39;s easier to make the 1st term always return 0. elif n == 1: print(fibList) return else: fibList.append(1) # for loop will go through each number of the sequence and append them into the list. for i in range(2,n): c = a + b a = b b = c fibList.append(c) print(fibList) # print final result fibonacci(n) . [0, 1, 1, 2, 3] .",
            "url": "https://deimie.github.io/fastpages/2022/08/22/pythonNotebook.html",
            "relUrl": "/2022/08/22/pythonNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Notebook",
            "content": "// Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! .",
            "url": "https://deimie.github.io/fastpages/2022/08/22/javaNotebook.html",
            "relUrl": "/2022/08/22/javaNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Tool Setup - Week 0",
            "content": "Github Link . Fastpages with post . Build personal Fastpages / GitHub pages “_post” share the following. . | Share link to personal Fastpages / GitHub pages running on github.io. . | My suggestion is to change index.html to show it is really yours. . | Share link to a new page (_posts) in your Fastpages project show use of Markdown and/or HTML fragments. You will need to learn special date requirements of a file as well as a little Markdown or HTML. . | Share link to Python Jupyter notebook (_notebooks) showing usage of Python: print (“Hello”) . | Share link to Java Jupyter notebook (_notebooks) showing usage of Java: System.out.println(“Hello”) . | Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) . | Share link showing your GitHub insights. This is your personal activity of commit history. . | . Java project running on localhost:8080 .",
            "url": "https://deimie.github.io/fastpages/markdown/2022/08/22/Tool-Setup-Week-0.html",
            "relUrl": "/markdown/2022/08/22/Tool-Setup-Week-0.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Evan Sanchez . I am a CSA student at Del Norte High School! .",
          "url": "https://deimie.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Welcome to my page! . Posts .",
          "url": "https://deimie.github.io/fastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Notes",
          "content": "Capture Information Plan . I plan to store all new information that I learn in this notes page for the rest of the trimester. This will mostly be the info I learn about java from code.org or personal research . . Syntax for Front Matter . . . Code.org Documentation . Lesson 1 . Lesson 1 is simply an introduction to the course. It talks about how CSA students are taught to think similarly to software engineers, and how we will continue to grow form this. . Lesson 2 . In lesson 2, we learn about the basic structure of a java header, as well as some basic syntax. Below is a basic java header. . public class className { public static void main(String[] args) { } } . The main method is the most common method used as an entry point to any java program. | The public method is simply a method that makes the scope of the code global. It’s kind of in the name. | static means that there will only be one type of this method and that it will be shared. Basically, we can call the main method multiple times without creating a new object. | void means there will be nothing returned from the main method. | String[] args - The main method’s argument is an array of string type. THis allows the method to accept command line arguments, which are stored as strings in this variable. args can be changed. | . Lesson 3 . To instatiate a new object you use the syntax: className objectName = new className(); . Lesson 4 . Lesson 4 was just lots of tedious programming challenges using the things we already learned from the first 3 lessons. There were 4 different challenges where we controlled a painter. These challenges made it almost muscle memory to call objects in java. . Lesson 5 . Lesson 5 was similar to lesson 4, by having many challnges to complete, except now the if statement was introduced. .",
          "url": "https://deimie.github.io/fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deimie.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}